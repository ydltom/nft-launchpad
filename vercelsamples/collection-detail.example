"use client"

import { useState, useEffect } from "react"
import type { ethers } from "ethers"
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { ArrowLeft, CheckCircle2, XCircle, Clock, Ticket, Users, ExternalLink } from "lucide-react"
import { useToast } from "@/hooks/use-toast"
import Image from "next/image"
import { CountdownTimer } from "@/components/countdown-timer"
import { LeaderboardButton } from "@/components/leaderboard-button"

// Sample NFT collection data
const nftCollections = {
  "cosmic-dreamers": {
    id: "cosmic-dreamers",
    name: "Cosmic Dreamers",
    description:
      "A journey through the digital cosmos, where dreams and reality merge. This exclusive collection features 10 unique NFTs, each representing a different celestial dream state.",
    image: "/placeholder.svg?height=400&width=400",
    artist: "Digital Nomad",
    price: "0.1 IMX",
    ticketPrice: "0.01",
    supply: "1,500",
    status: "active", // active, ended, upcoming
    ticketsSold: 342,
    participantCount: 284,
    winnerCount: 50,
    endTime: new Date("2025-04-15T00:00:00Z").getTime(),
    steps: [
      { id: 1, name: "Ticket Purchase", status: "active" },
      { id: 2, name: "Winner Announcement", status: "pending" },
      { id: 3, name: "Distribution", status: "pending" },
    ],
  },
  "neon-horizon": {
    id: "neon-horizon",
    name: "Neon Horizon",
    description:
      "The edge where digital and physical worlds collide in a burst of neon light. This collection explores the boundaries between reality and the digital realm.",
    image: "/placeholder.svg?height=400&width=400",
    artist: "Pixel Prophet",
    price: "0.1 IMX",
    ticketPrice: "0.01",
    supply: "1,500",
    status: "upcoming", // active, ended, upcoming
    ticketsSold: 0,
    participantCount: 0,
    winnerCount: 0,
    endTime: new Date("2025-05-01T00:00:00Z").getTime(),
    steps: [
      { id: 1, name: "Ticket Purchase", status: "pending" },
      { id: 2, name: "Winner Announcement", status: "pending" },
      { id: 3, name: "Distribution", status: "pending" },
    ],
  },
  "quantum-fragments": {
    id: "quantum-fragments",
    name: "Quantum Fragments",
    description:
      "Fragments of consciousness captured in the quantum realm. Each NFT represents a different quantum state, frozen in time.",
    image: "/placeholder.svg?height=400&width=400",
    artist: "Byte Artist",
    price: "0.1 IMX",
    ticketPrice: "0.01",
    supply: "1,500",
    status: "ended", // active, ended, upcoming
    ticketsSold: 1253,
    participantCount: 2284,
    winnerCount: 355,
    endTime: new Date("2025-03-15T00:00:00Z").getTime(),
    steps: [
      { id: 1, name: "Ticket Purchase", status: "completed" },
      { id: 2, name: "Winner Announcement", status: "completed" },
      { id: 3, name: "Distribution", status: "active" },
    ],
  },
  "digital-dreams": {
    id: "digital-dreams",
    name: "Digital Dreams",
    description:
      "Explore the boundaries of imagination in the digital realm. This collection features surreal landscapes and impossible structures.",
    image: "/placeholder.svg?height=400&width=400",
    artist: "Tech Visionary",
    price: "0.15 IMX",
    ticketPrice: "0.01",
    supply: "1,000",
    status: "active", // active, ended, upcoming
    ticketsSold: 578,
    participantCount: 412,
    winnerCount: 0,
    endTime: new Date("2025-04-20T00:00:00Z").getTime(),
    steps: [
      { id: 1, name: "Ticket Purchase", status: "active" },
      { id: 2, name: "Winner Announcement", status: "pending" },
      { id: 3, name: "Distribution", status: "pending" },
    ],
  },
  "cyber-punk": {
    id: "cyber-punk",
    name: "Cyber Punk",
    description:
      "A dystopian future where technology and humanity merge. This collection explores themes of cybernetics and human augmentation.",
    image: "/placeholder.svg?height=400&width=400",
    artist: "Neon Artist",
    price: "0.12 IMX",
    ticketPrice: "0.01",
    supply: "2,000",
    status: "upcoming", // active, ended, upcoming
    ticketsSold: 0,
    participantCount: 0,
    winnerCount: 0,
    endTime: new Date("2025-05-15T00:00:00Z").getTime(),
    steps: [
      { id: 1, name: "Ticket Purchase", status: "pending" },
      { id: 2, name: "Winner Announcement", status: "pending" },
      { id: 3, name: "Distribution", status: "pending" },
    ],
  },
  "abstract-reality": {
    id: "abstract-reality",
    name: "Abstract Reality",
    description:
      "Abstract art that challenges your perception of reality. Each piece is a unique exploration of form, color, and texture.",
    image: "/placeholder.svg?height=400&width=400",
    artist: "Mind Bender",
    price: "0.08 IMX",
    ticketPrice: "0.01",
    supply: "800",
    status: "ended", // active, ended, upcoming
    ticketsSold: 800,
    participantCount: 650,
    winnerCount: 120,
    endTime: new Date("2025-03-01T00:00:00Z").getTime(),
    steps: [
      { id: 1, name: "Ticket Purchase", status: "completed" },
      { id: 2, name: "Winner Announcement", status: "completed" },
      { id: 3, name: "Distribution", status: "active" },
    ],
  },
}

// Mock contract ABI (in a real project, you'd import the actual ABI)
const contractABI = [
  "function buyTickets(string collectionId, uint256 amount) payable",
  "function ticketPrice(string collectionId) view returns (uint256)",
  "function getTicketBalance(address user, string collectionId) view returns (uint256)",
  "function isWhitelisted(address user, string collectionId) view returns (bool)",
]

// Mock contract address (in a real project, you'd use the actual deployed contract address)
const contractAddress = "0x1234567890123456789012345678901234567890"

interface CollectionDetailProps {
  collectionId: string
  account: string | null
  provider: ethers.BrowserProvider | null
  onBack: () => void
}

export function CollectionDetail({ collectionId, account, provider, onBack }: CollectionDetailProps) {
  const collection = nftCollections[collectionId as keyof typeof nftCollections]
  const [ticketAmount, setTicketAmount] = useState<number>(1)
  const [isLoading, setIsLoading] = useState<boolean>(false)
  const [ticketBalance, setTicketBalance] = useState<number | null>(null)
  const [isWhitelisted, setIsWhitelisted] = useState<boolean | null>(null)
  const { toast } = useToast()

  // Load ticket data when account changes
  useEffect(() => {
    const loadTicketData = async () => {
      if (!account || !provider) return

      setIsLoading(true)

      try {
        // In a real implementation, these would be actual contract calls
        // For this hackathon demo, we'll use mock data

        // Simulate API delay
        await new Promise((resolve) => setTimeout(resolve, 1000))

        // Mock data based on collection
        if (collection.status === "active") {
          setTicketBalance(3) // 3 tickets
          setIsWhitelisted(false) // Not whitelisted yet
        } else if (collection.status === "ended") {
          setTicketBalance(5) // 5 tickets
          setIsWhitelisted(true) // Whitelisted
        } else {
          setTicketBalance(0) // No tickets yet
          setIsWhitelisted(false) // Not whitelisted
        }
      } catch (error) {
        console.error("Error loading ticket data:", error)
      } finally {
        setIsLoading(false)
      }
    }

    loadTicketData()
  }, [account, provider, collection])

  // Purchase tickets
  const purchaseTickets = async () => {
    if (!account || !provider) {
      toast({
        title: "Wallet Not Connected",
        description: "Please connect your wallet first",
        variant: "destructive",
      })
      return
    }

    setIsLoading(true)

    try {
      // In a real implementation, this would be an actual contract call
      // For this hackathon demo, we'll simulate the transaction

      // Calculate total cost
      const totalCost = Number.parseFloat(collection.ticketPrice) * ticketAmount

      // Simulate transaction (in a real app, this would be a real transaction)
      await new Promise((resolve) => setTimeout(resolve, 2000))

      // Update ticket balance
      setTicketBalance((prev) => (prev || 0) + ticketAmount)

      toast({
        title: "Tickets Purchased!",
        description: `Successfully purchased ${ticketAmount} ticket${ticketAmount > 1 ? "s" : ""}`,
        variant: "default",
      })
    } catch (error) {
      console.error("Error purchasing tickets:", error)
      toast({
        title: "Purchase Failed",
        description: "Failed to purchase tickets. Please try again.",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  // Get step status icon
  const getStepStatusIcon = (status: string) => {
    switch (status) {
      case "completed":
        return <CheckCircle2 className="h-6 w-6 text-green-500" />
      case "active":
        return <Clock className="h-6 w-6 text-yellow-500" />
      case "pending":
        return <div className="h-6 w-6 rounded-full border-2 border-gray-600" />
      default:
        return null
    }
  }

  if (!collection) {
    return (
      <div className="text-center">
        <p>Collection not found</p>
        <Button onClick={onBack} variant="outline" className="mt-4">
          <ArrowLeft className="mr-2 h-4 w-4" /> Back to Collections
        </Button>
      </div>
    )
  }

  return (
    <div className="mx-auto max-w-4xl">
      <Button onClick={onBack} variant="outline" className="mb-6">
        <ArrowLeft className="mr-2 h-4 w-4" /> Back to Collections
      </Button>

      <div className="grid gap-6 md:grid-cols-[1fr_2fr]">
        {/* Collection Image and Info */}
        <Card className="overflow-hidden bg-gray-800 text-white">
          <div className="relative aspect-square">
            {collection.status === "active" && (
              <div className="absolute right-2 top-2 z-10">
                <CountdownTimer endTime={collection.endTime} compact />
              </div>
            )}
            <img
              src={collection.image || "/placeholder.svg"}
              alt={collection.name}
              className="h-full w-full object-cover"
            />
          </div>
          <CardContent className="p-4">
            <h2 className="mb-1 text-xl font-bold">{collection.name}</h2>
            <p className="mb-3 text-sm text-gray-400">by {collection.artist}</p>

            <div className="mb-4 flex items-center justify-between">
              <div className="flex items-center gap-1">
                <div className="relative h-4 w-4">
                  <Image
                    src="/images/imx-logo.png"
                    alt="IMX"
                    width={16}
                    height={16}
                    className="h-full w-full object-contain"
                  />
                </div>
                <span className="text-sm font-medium">{collection.price}</span>
              </div>
              <div className="flex items-center gap-1">
                <Users className="h-4 w-4 text-purple-400" />
                <span className="text-sm text-gray-300">Supply: {collection.supply}</span>
              </div>
            </div>

            <p className="text-sm text-gray-300">{collection.description}</p>
          </CardContent>
        </Card>

        {/* Raffle Process */}
        <div className="space-y-4">
          <Card className="bg-gray-800 text-white">
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle>Raffle Status</CardTitle>
                {collection.status === "active" && <Badge className="bg-green-600">Active</Badge>}
                {collection.status === "upcoming" && <Badge className="bg-blue-600">Upcoming</Badge>}
                {collection.status === "ended" && <Badge className="bg-gray-600">Ended</Badge>}
              </div>
              <CardDescription>
                {collection.status === "active" && "Purchase tickets to enter the raffle"}
                {collection.status === "upcoming" && "Raffle will start soon"}
                {collection.status === "ended" && "Raffle has ended"}
              </CardDescription>
            </CardHeader>
            <CardContent>
              {/* Raffle Steps */}
              <div className="relative mb-6 pl-8">
                {/* Vertical line connecting steps */}
                <div className="absolute left-3 top-3 h-[calc(100%-24px)] w-0.5 bg-gray-700" />

                {/* Steps */}
                {collection.steps.map((step, index) => (
                  <div key={step.id} className="mb-6 last:mb-0">
                    <div className="flex items-start">
                      <div className="absolute left-0 flex h-6 w-6 items-center justify-center rounded-full bg-gray-800">
                        {getStepStatusIcon(step.status)}
                      </div>
                      <div className="ml-4">
                        <h3 className="text-lg font-medium">{step.name}</h3>

                        {/* Step 1: Ticket Purchase */}
                        {step.id === 1 && step.status === "active" && (
                          <div className="mt-3 space-y-4 rounded-lg bg-gray-900 p-4">
                            {/* Countdown Timer */}
                            <div>
                              <p className="mb-2 text-sm text-gray-400">Raffle ends in:</p>
                              <CountdownTimer endTime={collection.endTime} />
                            </div>

                            {/* Ticket Purchase */}
                            <div>
                              <div className="mb-2 flex items-center justify-between">
                                <span className="text-sm">Ticket Price:</span>
                                <div className="flex items-center gap-1">
                                  <div className="relative h-4 w-4">
                                    <Image
                                      src="/images/imx-logo.png"
                                      alt="IMX"
                                      width={16}
                                      height={16}
                                      className="h-full w-full object-contain"
                                    />
                                  </div>
                                  <span>{collection.ticketPrice} IMX</span>
                                </div>
                              </div>

                              {ticketBalance !== null && ticketBalance > 0 && (
                                <div className="mb-2 flex items-center justify-between">
                                  <span className="text-sm">Your Tickets:</span>
                                  <div className="flex items-center gap-1">
                                    <Ticket className="h-4 w-4 text-purple-400" />
                                    <span>{ticketBalance}</span>
                                  </div>
                                </div>
                              )}

                              <div className="mt-3 flex items-center gap-2">
                                <div className="flex flex-1 items-center rounded-md border border-gray-700 bg-gray-900">
                                  <Button
                                    variant="ghost"
                                    size="icon"
                                    onClick={() => setTicketAmount(Math.max(1, ticketAmount - 1))}
                                    className="h-8 w-8 rounded-none rounded-l-md border-r border-gray-700"
                                  >
                                    -
                                  </Button>
                                  <Input
                                    type="number"
                                    min="1"
                                    value={ticketAmount}
                                    onChange={(e) => setTicketAmount(Number.parseInt(e.target.value) || 1)}
                                    className="h-8 flex-1 border-0 bg-transparent text-center"
                                  />
                                  <Button
                                    variant="ghost"
                                    size="icon"
                                    onClick={() => setTicketAmount(ticketAmount + 1)}
                                    className="h-8 w-8 rounded-none rounded-r-md border-l border-gray-700"
                                  >
                                    +
                                  </Button>
                                </div>
                                <Button
                                  onClick={purchaseTickets}
                                  disabled={!account || isLoading}
                                  className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700"
                                >
                                  {isLoading ? "Processing..." : "Buy Tickets"}
                                </Button>
                              </div>

                              <div className="mt-3 text-xs text-gray-400">
                                Each ticket gives you one entry into the whitelist raffle
                              </div>
                            </div>
                          </div>
                        )}

                        {/* Step 1: Ticket Purchase (Completed) */}
                        {step.id === 1 && step.status === "completed" && (
                          <div className="mt-2 text-sm text-gray-400">
                            Ticket sales have ended. {collection.ticketsSold} tickets were sold.
                          </div>
                        )}

                        {/* Step 1: Ticket Purchase (Pending) */}
                        {step.id === 1 && step.status === "pending" && (
                          <div className="mt-2 text-sm text-gray-400">Ticket sales will begin soon.</div>
                        )}

                        {/* Step 2: Winner Announcement (Active) */}
                        {step.id === 2 && step.status === "active" && (
                          <div className="mt-3 rounded-lg bg-gray-900 p-4">
                            <p className="text-sm">Winners are being selected...</p>
                            <div className="mt-2 h-2 w-full overflow-hidden rounded-full bg-gray-800">
                              <div className="h-full animate-pulse bg-yellow-500" style={{ width: "60%" }}></div>
                            </div>
                          </div>
                        )}

                        {/* Step 2: Winner Announcement (Completed) */}
                        {step.id === 2 && step.status === "completed" && (
                          <div className="mt-2 text-sm text-gray-400">Winners have been selected and notified.</div>
                        )}

                        {/* Step 3: Distribution (Active) */}
                        {step.id === 3 && step.status === "active" && (
                          <div className="mt-3 rounded-lg bg-gray-900 p-4">
                            {isWhitelisted ? (
                              <div className="text-center">
                                <CheckCircle2 className="mx-auto mb-2 h-8 w-8 text-green-500" />
                                <p className="mb-2 font-medium">Congratulations! You're whitelisted!</p>
                                <p className="mb-4 text-sm text-gray-400">
                                  You can now mint your NFT from the collection.
                                </p>
                                <Button className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700">
                                  Mint NFT <ExternalLink className="ml-2 h-3 w-3" />
                                </Button>
                              </div>
                            ) : (
                              <div className="text-center">
                                <XCircle className="mx-auto mb-2 h-8 w-8 text-red-500" />
                                <p className="mb-2 font-medium">You were not selected in this raffle</p>
                                <p className="text-sm text-gray-400">
                                  Better luck next time! Check out our other upcoming collections.
                                </p>
                              </div>
                            )}
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Collection Stats */}
          <Card className="bg-gray-800 text-white">
            <CardHeader>
              <CardTitle>Collection Stats</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-2 gap-4 sm:grid-cols-4">
                <div className="rounded-lg bg-gray-900 p-3 text-center">
                  <p className="text-sm text-gray-400">Total Supply</p>
                  <p className="text-xl font-bold">{collection.supply}</p>
                </div>
                <div className="rounded-lg bg-gray-900 p-3 text-center">
                  <p className="text-sm text-gray-400">Tickets Sold</p>
                  <p className="text-xl font-bold">{collection.ticketsSold}</p>
                </div>
                <div className="rounded-lg bg-gray-900 p-3 text-center">
                  <p className="text-sm text-gray-400">Ticket Price</p>
                  <p className="text-xl font-bold">{collection.ticketPrice} IMX</p>
                </div>
                <div className="rounded-lg bg-gray-900 p-3 text-center">
                  <p className="text-sm text-gray-400">NFT Price</p>
                  <p className="text-xl font-bold">{collection.price}</p>
                </div>
              </div>

              {/* Leaderboard Buttons */}
              <div className="space-y-3">
                <LeaderboardButton
                  type="participants"
                  count={collection.participantCount}
                  collectionId={collection.id}
                />

                {collection.status === "ended" && (
                  <LeaderboardButton type="winners" count={collection.winnerCount} collectionId={collection.id} />
                )}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}
